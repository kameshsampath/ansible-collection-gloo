- name: "Ensure {{ bin_dir }}"
  ansible.builtin.file:
    state: directory
    path: "{{ bin_dir }}"

- name: "Ensure Gloo Mesh Clusters"
  fail:
    msg: "Please define the Kubernetes clusters for Gloo Mesh using 'gloo_clusters' dictionary"
  when: gloo_clusters is not defined

- name: "Add Gloo Mesh Helm Repo"
  kubernetes.core.helm_repository:
    name: gloo-mesh-enterprise
    repo_url: "https://storage.googleapis.com/gloo-mesh-enterprise/gloo-mesh-enterprise"

- name: "Refresh Helm Repositories"
  ansible.builtin.command:
    argv:
      - helm
      - repo
      - update
      
- name: "Query Gloo Mesh Versions"
  ansible.builtin.command:
    argv:
      - helm
      - search
      - repo
      - gloo-mesh-enterprise/gloo-mesh-enterprise
      - -ojson
  register: gloo_mesh_ee_version_info
  changed_when: false
  when: gloo_mesh_ee_version is not defined

- name: "Fail when version Gloo Mesh info does not exist"
  fail:
    msg: "Gloo Mesh EE Version not available"
  when: gloo_mesh_ee_version is not defined and gloo_mesh_ee_version_info.stdout is not defined

- name: "Set Gloo Mesh EE Version"
  set_fact:
    gloo_mesh_ee_version: "{{ gloo_mesh_ee_version_info.stdout  | from_json | first | community.general.json_query('version') }}"
  when: gloo_mesh_ee_version is not defined

- name: "Gloo Mesh Version"
  debug:
    var: gloo_mesh_ee_version

- name: "Set Gloo EE License Facts"
  set_fact:
    mesh_license_key: "{{ lookup('env', 'GLOO_MESH_LICENSE_KEY') }}"

- name: "Ensure Gloo Mesh License Key is defined"
  fail:
    msg: "Gloo License Key not defined, please define it via environment variable '$GLOO_MESH_LICENSE_KEY'"
  when: mesh_license_key is not defined

- name: "Create temporary gloo install directory"
  ansible.builtin.tempfile:
    state: directory
    prefix: "{{ 'gloo_mesh_ee'+ gloo_mesh_ee_version }}"
  register: gloo_mesh_install_tmpdir

- name: "Ensure meshctl File for RedHat/Ubuntu"
  ansible.builtin.get_url:
    url: "https://storage.googleapis.com/meshctl/v{{ gloo_mesh_ee_version }}/meshctl-linux-amd64.sha256"
    dest: "/tmp/meshctl.sha256"
  when: ansible_os_family == "RedHat" or  ansible_os_family == "Debian"

- name: "Ensure meshctl File for Darwin"
  ansible.builtin.get_url:
    url: "https://storage.googleapis.com/meshctl/v{{ gloo_mesh_ee_version }}/meshctl-darwin-amd64.sha256"
    dest: "/tmp/meshctl.sha256"
  when: ansible_os_family == "Darwin"

- name: "Ensure meshctl File for RedHat/Ubuntu"
  set_fact:
    meshctl_download_file: "https://storage.googleapis.com/meshctl/v{{ gloo_mesh_ee_version }}/meshctl-linux-amd64"
  when: ansible_os_family == "RedHat" or  ansible_os_family == "Debian"

- name: "Find the sha256 of meshctl"
  ansible.builtin.slurp:
    src: /tmp/meshctl.sha256
  register: meshctl_sha256

- name: "Ensure meshctl File for Darwin"
  set_fact:
    meshctl_download_file: "https://storage.googleapis.com/meshctl/v{{ gloo_mesh_ee_version }}/meshctl-darwin-amd64"
    meshctl_checksum: "{{ meshctl_sha256['content'] | b64decode |regex_search('(?P<checksum>^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?)(.*)$','\\g<checksum>') | first }}"
  when: ansible_os_family == "Darwin"

- name: "meshctl checksum"
  debug:
    msg: "{{ meshctl_checksum  }}"

- name: "Download meshctl"
  ansible.builtin.get_url:
    url: "{{ meshctl_download_file }}"
    checksum: "sha256:{{ meshctl_checksum}}"
    dest: "{{ bin_dir }}/meshctl"
    mode: "0755"
  register: downloaded_meshctl

- name: "Create Gloo Mesh EE Helm Values"
  template:
    src: "mesh-override-values.yaml.j2"
    dest: "{{ gloo_mesh_install_tmpdir.path }}/install-overrides.yaml"
  register: gloo_mesh_install_override_file

- name: "Set Gloo Helm Value File Facts"
  set_fact:
    gloo_mesh_install_override_files: "{{ gloo_mesh_install_override_files + [gloo_mesh_install_override_file.dest] }}"

# - name: "Template Gloo Mesh Enterprise"
#   kubernetes.core.helm_template:
#     chart_ref: gloo-mesh-enterprise/gloo-mesh-enterprise
#     chart_version: "{{ gloo_mesh_ee_version }}"
#     values_files: "{{ gloo_mesh_install_override_files }}"
#     output_dir: "{{ work_dir }}/temp"
#   loop: "{{ gloo_clusters | dict2items}}"
#   loop_control:
#     label: "{{ item.key }}"
#   register: enterprise_networking_result
#   when: item.key == "mgmt"

# - fail:
#    msg: "checkpoint"

- name: "Deploy Gloo Mesh Enterprise"
  kubernetes.core.helm:
    release_name: gloo-enterprise
    chart_ref: gloo-mesh-enterprise/gloo-mesh-enterprise
    release_namespace: gloo-mesh
    create_namespace: yes
    chart_version: "{{ gloo_mesh_ee_version }}"
    values_files: "{{ gloo_mesh_install_override_files }}"
    update_repo_cache: yes
    context: "{{ item.value.k8s_context }}"
  loop: "{{ gloo_clusters | dict2items}}"
  loop_control:
    label: "{{ item.key }}"
  when: item.key == "mgmt"

- name: "Wait for Enteprise Networking Pod to be running"
  include: utils/deployment_check.yml
  vars:
    deployment_name: enterprise-networking
    deployment_namespace: gloo-mesh
    deployment_context: "{{ item.value.k8s_context }}"
  loop: "{{ gloo_clusters | dict2items}}"
  loop_control:
    label: "{{ item.key }}"
  when: item.key == "mgmt"

- name: "Wait for rbac-webhook Pod to be running"
  include: utils/deployment_check.yml
  vars:
    deployment_name: rbac-webhook
    deployment_namespace: gloo-mesh
    deployment_context: "{{ item.value.k8s_context }}"
  loop: "{{ gloo_clusters | dict2items}}"
  loop_control:
    label: "{{ item.key }}"
  when: item.key == "mgmt"

## Agent Regisrations Registration

- name: "Get Relay Endpoint Address"
  kubernetes.core.k8s_info:
    context: "{{ gloo_clusters.mgmt.k8s_context }}"
    namespace: gloo-mesh
    kind: Service
    version: v1
    name: enterprise-networking
  register: enterprise_networking_svc_result

# - debug:
#     var: enterprise_networking_svc_result

- name: "Fail when enterprise-networking service not found"
  fail:
    msg: "Enterprise Networking Service not found"
  when: enterprise_networking_svc_result.resources | length == 0

- name: "Set Enterprise Networking Facts"
  set_fact:
    grpc_ports: "{{ enterprise_networking_svc_result | json_query(grpc_ports_query) | first }}"
    load_balancer: "{{ enterprise_networking_svc_result | json_query(lb_query) | first }}"
  vars:
    grpc_ports_query: "resources[*].spec.ports[?name==`grpc`]"
    lb_query: "resources[*].status.loadBalancer"

- name: "Get the Load Balancer Address"
  set_fact:
    service_ip: "{{ load_balancer | json_query(lb_address_query) | first }}"
    use_nodeport: false
  when: load_balancer | length > 0
  vars:
    lb_address_query: "ingress[*]"

# - debug:
#     var: grpc_ports

- name: "Use LoadBalancer IP for Relay Address"
  set_fact:
    relay_address: "{{ service_ip.ip }}:{{ ( grpc_ports | first ).port }}"
  when: ( service_ip is defined and service_ip.ip is defined ) and not use_nodeport

- name: "Use LoadBalancer Hostname for Relay Address"
  set_fact:
    relay_address: "{{ service_ip.address }}:{{ ( grpc_ports | first ).port }}"
  when: ( service_ip is defined and service_ip.address is defined ) and not use_nodeport

- name: "Get Gloo Mesh Management Nodes IP"
  kubernetes.core.k8s_info:
    context: "{{ gloo_clusters.mgmt.k8s_context }}"
    kind: Node
    version: v1
  register: gloo_cluster_mgmt_nodes
  when: not relay_address is defined

#- debug:
#    var: gloo_cluster_mgmt_nodes

- name: "Extract Node IPs"
  set_fact:
    node_ips: "{{ gloo_cluster_mgmt_nodes | json_query(node_ip_query) | flatten }}"
    use_nodeport: true
  vars:
    node_ip_query: "resources[*].status.addresses[?type==`InternalIP`].address"
  when: not relay_address is defined

- name: "Use Node IP for Gloo Mesh Relay Address"
  set_fact:
    relay_address: "{{ node_ips | random }}:{{ ( grpc_ports | first ).nodePort }}"
  when: use_nodeport

- name: "Register Clusters to Mesh"
  include: register_cluster.yml
  vars:
    gloo_agent_cluster: "{{ gloo_cluster_item.value }}"
    gloo_agent_cluster_name: "{{ gloo_cluster_item.value.cluster_name | default( gloo_cluster_item.key )  }}"
    mgmt_k8s_context: "{{ gloo_clusters.mgmt.k8s_context  }}"
  loop: "{{ gloo_clusters | dict2items }}"
  loop_control:
    label: "{{ gloo_cluster_item.key }}"
    loop_var: gloo_cluster_item
  register: gloo_cluster_mgmt_nodes
  when: gloo_cluster_item.key != "mgmt"

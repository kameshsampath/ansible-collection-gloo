# - debug:
#    var: gloo_clusters

- name: "Get Relay Root TLS"
  kubernetes.core.k8s_info:
    context: "{{ gloo_cluster_item.value.k8s_context }}"
    namespace: gloo-mesh
    kind: secret
    version: v1
    name: relay-root-tls-secret
  loop: "{{ gloo_clusters | dict2items }}"
  loop_control:
    label: "{{ gloo_cluster_item.key }}"
    loop_var: gloo_cluster_item
  register: relay_root_tls
  when: gloo_cluster_item.key == 'mgmt'

# - debug:
#     var: relay_root_tls

- name: "Fail when tls secret not found"
  fail:
    msg: "Invalid Realay Root TLS"
  when: relay_root_tls.results[0].resources | length == 0 or relay_root_tls.results[0].resources[0].data is not defined


- name: "Get Relay Identity Token"
  kubernetes.core.k8s_info:
    context: "{{ gloo_cluster_item.value.k8s_context }}"
    namespace: gloo-mesh
    kind: secret
    version: v1
    name: relay-identity-token-secret
  loop: "{{ gloo_clusters | dict2items }}"
  loop_control:
    label: "{{ gloo_cluster_item.key }}"
    loop_var: gloo_cluster_item
  register: relay_identity_token
  when: gloo_cluster_item.key == 'mgmt'

# - debug:
#     var: relay_root_tls

- name: "Fail when relay_identity_token secret not found"
  fail:
    msg: "Invalid Relay Identity Token"
  when: relay_identity_token.results[0].resources | length == 0 or relay_identity_token.results[0].resources[0].data is not defined


- name: "Set Gloo Mesh Agent Root CA Fact"
  set_fact:
    relay_root_tls_ca_crt: "{{ relay_root_tls_item.resources[0].data['ca.crt']  }}"
  loop: "{{ relay_root_tls.results }}"
  loop_control:
    label: "{{ relay_root_tls_item.gloo_cluster_item.value.k8s_context }}"
    loop_var: relay_root_tls_item
  when: relay_root_tls_item.gloo_cluster_item.value.k8s_context == "mgmt"

# - debug:
#     var: relay_root_tls_ca_crt

- name: "Set Gloo Mesh Agent Token Fact"
  set_fact:
    relay_token: "{{ relay_token_item.resources[0].data.token }}"
  loop: "{{ relay_identity_token.results }}"
  loop_control:
    label: "{{ relay_token_item.gloo_cluster_item.value.k8s_context }}"
    loop_var: relay_token_item
  when: relay_token_item.gloo_cluster_item.value.k8s_context == "mgmt"

# - debug:
#     var: relay_token

- name: "Create gloo-mesh namespace"
  kubernetes.core.k8s:
    context: "{{ gloo_cluster_item.value.k8s_context }}"
    kind: Namespace
    version: v1
    name: gloo-mesh
    state: present
  loop: "{{ gloo_clusters | dict2items }}"
  loop_control:
    label: "{{ gloo_cluster_item.key }}"
    loop_var: gloo_cluster_item
  register: relay_root_tls
  when: gloo_cluster_item.key != 'mgmt'

- name: "Create Relay Root CA Cert"
  kubernetes.core.k8s:
    context: "{{ gloo_cluster_item.value.k8s_context }}"
    definition:
      kind: Secret
      version: v1
      metadata:
        name: relay-root-tls-secret
        namespace: gloo-mesh
      data:
        ca.crt: "{{ relay_root_tls_ca_crt }}"
    state: present
  loop: "{{ gloo_clusters | dict2items }}"
  loop_control:
    label: "{{ gloo_cluster_item.key }}"
    loop_var: gloo_cluster_item
  register: relay_root_tls
  when: gloo_cluster_item.key != 'mgmt'

- name: "Create Relay Identity Token"
  kubernetes.core.k8s:
    context: "{{ gloo_cluster_item.value.k8s_context }}"
    definition:
      kind: Secret
      version: v1
      metadata:
        name: relay-identity-token-secret
        namespace: gloo-mesh
      data:
        token: "{{ relay_token }}"
    state: present
  loop: "{{ gloo_clusters | dict2items }}"
  loop_control:
    label: "{{ gloo_cluster_item.key }}"
    loop_var: gloo_cluster_item
  register: relay_root_tls
  when: gloo_cluster_item.key != 'mgmt'

- name: "Add Gloo Mesh Agent Helm Repo"
  kubernetes.core.helm_repository:
    name: enterprise-agent
    repo_url: "https://storage.googleapis.com/gloo-mesh-enterprise/enterprise-agent"

- name: "Query Gloo Mesh Versions"
  ansible.builtin.command:
    argv:
      - helm
      - search 
      - repo
      - enterprise-agent/enterprise-agent
      - -ojson
  register: gloo_mesh_agent_version_info
  changed_when: false
  when: gloo_mesh_agent_version is not defined

- name: "Fail when version Gloo Mesh Agent info does not exist"
  fail:
    msg: "Gloo Mesh AgentVersion not available"
  when: gloo_mesh_agent_version is not defined and gloo_mesh_agent_version_info.stdout is not defined

- name: "Set Gloo Mesh Agent Version"
  set_fact:
    gloo_mesh_agent_version: "{{ gloo_mesh_agent_version_info.stdout  | from_json | first | community.general.json_query('version') }}"
  when: gloo_mesh_agent_version is not defined

- name: "Gloo Mesh Agent Version"
  debug: 
    var: gloo_mesh_agent_version
  
- name: "Get Relay Endpoint Address"
  kubernetes.core.k8s_info:
    context: "{{ gloo_cluster_item.value.k8s_context }}"
    namespace: gloo-mesh
    kind: Service
    version: v1
    name: enterprise-networking
  loop: "{{ gloo_clusters | dict2items }}"
  loop_control:
    label: "{{ gloo_cluster_item.key }}"
    loop_var: gloo_cluster_item
  register: enterprise_networking_svc_result
  when: gloo_cluster_item.key == 'mgmt'

- name: "Fail when enterprise-networking service not found"
  fail:
    msg: "Enterprise Networking Service not found"
  when: enterprise_networking_svc_result.results[0].resources | length == 0

- name: "Set Enterprise Networking Facts"
  set_fact: 
    grpc_ports: "{{ svc_item | json_query(grpc_ports_query) | first }}"
    load_balancer: "{{ svc_item | json_query(lb_query) | first }}"
  loop: "{{ enterprise_networking_svc_result.results }}"
  loop_control:
    loop_var: svc_item
    label: "{{ svc_item.gloo_cluster_item.key }}"
  when: svc_item.resources is defined and svc_item.resources | length == 1
  vars:
      grpc_ports_query: 'resources[*].spec.ports[?name==`grpc`]'
      lb_query: 'resources[*].status.loadBalancer'

- name: "Get the Load Balancer Address"
  set_fact:
    service_ip: "{{ load_balancer | json_query(lb_address_query) | first }}"
    use_nodeport: false
  when:  load_balancer | length > 0
  vars:
    lb_address_query: 'ingress[*]'

# - debug:
#     var: grpc_ports

- name: "Use LoadBalancer IP for Relay Address"
  set_fact:
    relay_address: "{{ service_ip }}:{{ ( grpc_ports | first ).port }}"
  when: ( service_ip is defined or service_ip | length > 0 ) and not use_nodeport

- name: "Get Gloo Mesh Management Nodes IP"
  kubernetes.core.k8s_info:
    context: "{{ gloo_cluster_item.value.k8s_context }}"
    kind: Node
    version: v1
  loop: "{{ gloo_clusters | dict2items }}"
  loop_control:
    label: "{{ gloo_cluster_item.key }}"
    loop_var: gloo_cluster_item
  register: gloo_cluster_mgmt_nodes
  when: gloo_cluster_item.key == 'mgmt' and (service_ip is not defined or service_ip | length == 0 )

- name: "Extract Node IPs"
  set_fact:
    node_ips: "{{ gloo_cluster_mgmt_nodes.results[0] | json_query(node_ip_query) | flatten }}"
    use_nodeport: true
  vars:
    node_ip_query: "resources[*].status.addresses[?type==`InternalIP`].address"
  when: service_ip is not defined or service_ip | length == 0

- name: "Use Node IP for Gloo Mesh Relay Address"
  set_fact:
    relay_address: "{{ node_ips | random }}:{{ ( grpc_ports | first ).nodePort }}"
  when: use_nodeport

- name: "Enterprise Networking Relay Address"
  debug:
    var: relay_address

- name: "Deploy Gloo Mesh Enterprise Agent"
  kubernetes.core.helm:
    release_name: enterprise-agent
    chart_ref: enterprise-agent/enterprise-agent
    release_namespace: gloo-mesh
    create_namespace: yes
    chart_version: "{{ gloo_mesh_agent_version }}"
    values: "{{ lookup('template', 'agent-values.yaml.j2') | from_yaml }}"
    update_repo_cache: yes
    context: "{{ item.value.k8s_context }}"
  loop: "{{ gloo_clusters | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.key != "mgmt"

- name: "Create/Update Gloo Mesh Kubernetes Clusters"
  kubernetes.core.k8s:
    state: present
    template:
      - path: mesh-cluster.yaml.j2
        variable_start_string: '[['
        variable_end_string: ']]'
    context: "{{ gloo_clusters['mgmt'].k8s_context }}"
  loop: "{{ gloo_clusters | dict2items}}"
  loop_control:
    label: "{{ item.key }}"
  when: item.key != 'mgmt'

- name: "Wait for Enteprise Networking Agent Pod to be running"
  include: utils/deployment_check.yml
  vars:
    deployment_name: enterprise-agent
    deployment_namespace: gloo-mesh
    deployment_context: "{{ item.value.k8s_context }}"
  loop: "{{ gloo_clusters | dict2items}}"
  loop_control:
    label: "{{ item.key }}"
  when: item.key != "mgmt"

- name: "Create gloo-mesh-addons namespace"
  kubernetes.core.k8s:
    context: "{{ gloo_cluster_item.value.k8s_context }}"
    definition:
      kind: Namespace
      version: v1
      metadata:
        name: gloo-mesh-addons
        labels:
          istio-injection: enabled
      state: present
  loop: "{{ gloo_clusters | dict2items }}"
  loop_control:
    label: "{{ gloo_cluster_item.key }}"
    loop_var: gloo_cluster_item
  register: relay_root_tls
  when: gloo_cluster_item.key != 'mgmt'

- name: "Deploy Gloo Mesh Enterprise Agent Addons"
  kubernetes.core.helm:
    release_name: enterprise-agent-addons
    chart_ref: enterprise-agent/enterprise-agent
    release_namespace: gloo-mesh-addons
    create_namespace: yes
    chart_version: "{{ gloo_mesh_agent_version }}"
    values: "{{ lookup('template', 'agent-addons-values.yaml.j2') | from_yaml }}"
    update_repo_cache: yes
    context: "{{ item.value.k8s_context }}"
  loop: "{{ gloo_clusters | dict2items}}"
  loop_control:
    label: "{{ item.key }}"
  when: item.key != "mgmt"

- name: "Create/Update Gloo Mesh Agent Addons Policy"
  kubernetes.core.k8s:
    state: present
    template:
      - path: agent-addons-policy.yaml.j2
        variable_start_string: '[['
        variable_end_string: ']]'
    context: "{{ gloo_clusters['mgmt'].k8s_context }}"
  loop: "{{ gloo_clusters | dict2items}}"
  loop_control:
    label: "{{ item.key }}"
  when: item.key != 'mgmt'
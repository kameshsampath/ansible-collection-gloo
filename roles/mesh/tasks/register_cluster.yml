- name: "Agent Name"
  debug:
    var: gloo_agent_cluster_name

- name: "Agent Cluster Info"
  debug:
    var: gloo_agent_cluster

- name: "Enterprise Networking Relay Address"
  debug:
    var: relay_address
  
# - fail:
#     msg: "checkpoint"

- name: "Get Relay Root TLS"
  kubernetes.core.k8s_info:
    context: "{{ mgmt_k8s_context }}"
    namespace: gloo-mesh
    kind: secret
    version: v1
    name: relay-root-tls-secret
  register: relay_root_tls

# - debug:
#     var: relay_root_tls

- name: "Fail when tls secret not found"
  fail:
    msg: "Invalid Realay Root TLS"
  when: relay_root_tls.resources | length == 0 or relay_root_tls.resources[0].data is not defined

- name: "Get Relay Identity Token"
  kubernetes.core.k8s_info:
    context: "{{ mgmt_k8s_context }}"
    namespace: gloo-mesh
    kind: secret
    version: v1
    name: relay-identity-token-secret
  register: relay_identity_token

# - debug:
#     var: relay_root_tls

- name: "Fail when relay_identity_token secret not found"
  fail:
    msg: "Invalid Relay Identity Token"
  when: relay_identity_token.resources | length == 0 or relay_identity_token.resources[0].data is not defined

- name: "Set Gloo Mesh Agent Root CA Fact"
  set_fact:
    relay_root_tls_ca_crt: "{{ relay_root_tls.resources[0].data['ca.crt']  }}"

# - debug:
#     var: relay_root_tls_ca_crt

- name: "Set Gloo Mesh Agent Token Fact"
  set_fact:
    relay_token: "{{ relay_identity_token.resources[0].data.token }}"

# - debug:
#     var: relay_token

- name: "Create gloo-mesh namespace"
  kubernetes.core.k8s:
    context: "{{ gloo_agent_cluster.k8s_context }}"
    kind: Namespace
    version: v1
    name: gloo-mesh
    state: present

- name: "Create Relay Root CA Cert on Agent {{ gloo_agent_cluster_name }}"
  kubernetes.core.k8s:
    context: "{{ gloo_agent_cluster.k8s_context }}"
    definition:
      kind: Secret
      version: v1
      metadata:
        name: relay-root-tls-secret
        namespace: "{{ gloo_mesh_namespace }}"
      data:
        ca.crt: "{{ relay_root_tls_ca_crt }}"
    state: present

- name: "Create Relay Identity Token on Agent {{ gloo_agent_cluster_name }}"
  kubernetes.core.k8s:
    context: "{{ gloo_agent_cluster.k8s_context }}"
    definition:
      kind: Secret
      version: v1
      metadata:
        name: relay-identity-token-secret
        namespace: "{{ gloo_mesh_namespace }}"
      data:
        token: "{{ relay_token }}"
    state: present

- name: "Add Gloo Mesh Agent Helm Repo"
  kubernetes.core.helm_repository:
    name: enterprise-agent
    repo_url: "https://storage.googleapis.com/gloo-mesh-enterprise/enterprise-agent"

- name: "Query Gloo Mesh Versions"
  ansible.builtin.command:
    argv:
      - helm
      - search
      - repo
      - enterprise-agent/enterprise-agent
      - -ojson
  register: gloo_mesh_agent_version_info
  changed_when: false
  when: gloo_mesh_agent_version is not defined

- name: "Fail when version Gloo Mesh Agent info does not exist"
  fail:
    msg: "Gloo Mesh AgentVersion not available"
  when: gloo_mesh_agent_version is not defined and gloo_mesh_agent_version_info.stdout is not defined

- name: "Set Gloo Mesh Agent Version"
  set_fact:
    gloo_mesh_agent_version: "{{ gloo_mesh_agent_version_info.stdout  | from_json | first | community.general.json_query('version') }}"
  when: gloo_mesh_agent_version is not defined

- name: "Gloo Mesh Agent Version"
  debug:
    var: gloo_mesh_agent_version

- name: "Create temporary gloo agent install directory"
  ansible.builtin.tempfile:
    state: directory
    prefix: "{{ ['gloo_mesh_ee_agent', gloo_agent_cluster_name, gloo_mesh_agent_version] | join('_') }}"
  register: gloo_mesh_agent_install_tmpdir

- name: "Create Gloo Mesh Agent EE Helm Values"
  template:
    src: "agent-values.yaml.j2"
    dest: "{{ gloo_mesh_agent_install_tmpdir.path }}/install-overrides.yaml"
  register: gloo_mesh_agent_install_override_file

- name: "Set Gloo Agent Helm Value File Facts"
  set_fact:
    gloo_mesh_agent_override_files: "{{ gloo_mesh_agent_override_files + [gloo_mesh_agent_install_override_file.dest] }}"

- name: "Deploy Gloo Mesh Enterprise Agent"
  kubernetes.core.helm:
    release_name: enterprise-agent
    chart_ref: enterprise-agent/enterprise-agent
    release_namespace: "{{ gloo_mesh_namespace }}"
    create_namespace: yes
    chart_version: "{{ gloo_mesh_agent_version }}"
    values_files: "{{ gloo_mesh_agent_override_files }}"
    update_repo_cache: yes
    context: "{{ gloo_agent_cluster.k8s_context }}"

- name: "Create/Update Gloo Mesh Kubernetes Clusters"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: multicluster.solo.io/v1alpha1
      kind: KubernetesCluster
      metadata:
        name: "{{ gloo_agent_cluster_name }}"
        namespace: "{{ gloo_mesh_namespace }}"
      spec:
        clusterDomain: "{{ mesh_cluster_domain }}"
    context: "{{ mgmt_k8s_context }}"

- name: "Wait for Enteprise Networking Agent Pod to be running"
  include_tasks: utils/deployment_check.yml
  vars:
    deployment_name: enterprise-agent
    deployment_namespace: gloo-mesh
    deployment_context: "{{ gloo_agent_cluster.k8s_context }}"


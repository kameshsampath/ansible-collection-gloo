- name: "Update Istio Versions Facts"
  set_fact:
    istio_installs: '{{ istio_installs | combine( { item.1.key:  { "revision": rev_label, "install": item.1.value.install | bool  } }, recursive=True  ) }}'
  vars:
    rev_label: "{{ item.1.key | regex_replace('\\.','-') }}"
  loop: "{{ gloo_clusters | dict2items | zip(istio_installs | dict2items) }}"
  loop_control:
    label: "{{ item.1.key }}"

- name: "Set Istio Installable Clusters Fact"
  set_fact: 
      istio_k8_contexts: "{{ gloo_clusters | dictsort | selectattr('1.install_istio', 'truthy') | map(attribute='1.k8s_context') | list }}"

- name: "Update Gloo Clusters Istio Facts"
  set_fact:
    istio_installs: "{{ istio_installs | combine( { item.key: { \"k8s_contexts\": istio_k8_contexts } }, recursive=True ) }}"
  loop: "{{ istio_installs | dict2items  }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.install | bool

- name: "Istio Install Facts"
  debug:
    msg: "{{ istio_installs }}"

- name: "Ensure istio for RedHat/Ubuntu"
  ansible.builtin.get_url:
    url: "https://github.com/istio/istio/releases/download/{{ item.key }}/istio-{{ item.key }}-linux-amd64.tar.gz.sha256"
    dest: "/tmp/istio-{{ item.key }}-linux-amd64.tar.gz.sha256" 
  loop: "{{ istio_installs | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: ansible_os_family == "RedHat" or  ansible_os_family == "Debian" 

- name: "Ensure istio for Darwin"
  ansible.builtin.get_url:
    url: "https://github.com/istio/istio/releases/download/{{ item.key }}/istio-{{ item.key }}-osx.tar.gz.sha256"
    dest: "/tmp/istio-{{ item.key }}-darwin.tar.gz.sha256"
  loop: "{{ istio_installs | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: ansible_os_family == "Darwin"

- name: "Downloading Istio for RedHat/Debian"
  get_url:
    url: "https://github.com/istio/istio/releases/download/{{ item.key }}/istio-{{ item.key }}-linux-amd64.tar.gz"
    checksum: "sha256:{{ lookup('file','/tmp/istio-'+ item.key + '-linux-amd64.tar.gz.sha256') | split(' ') | first | trim }}"
    dest: "/tmp"
  loop: "{{ istio_installs | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: ansible_os_family == "RedHat" or  ansible_os_family == "Debian" 

- name: "Downloading Istio for Darwin"
  get_url:
    url: "https://github.com/istio/istio/releases/download/{{ item.key }}/istio-{{ item.key }}-osx.tar.gz"
    checksum: "sha256:{{ lookup('file','/tmp/istio-'+ item.key + '-darwin.tar.gz.sha256' ) | split(' ') | first | trim }}"
    dest: "/tmp"
  loop: "{{ istio_installs | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: ansible_os_family == "Darwin"

- name: "Create Istio Work Directories"
  ansible.builtin.file:
    path: "{{ work_dir }}/{{ item.key | regex_replace('\\.','-') }}"
    state: directory
    recurse: yes
  loop: "{{ istio_installs | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: "Extract Istio"
  unarchive:
    src: "/tmp/istio-{{ item.key }}-osx.tar.gz"
    dest: "{{ work_dir }}/{{ item.key | regex_replace('\\.','-') }}"
    remote_src: yes
  register: istio_install
  loop: "{{ istio_installs | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: "Generate Istio Operator Templates"
  kubernetes.core.helm_template:
    chart_ref: "{{ work_dir }}/{{ item.value.revision }}/istio-{{ item.key }}/manifests/charts/istio-operator"
    include_crds: yes
    release_values:
      operatorNamespace: istio-operator
      watchedNamespaces: "istio-system,istio-gateways"
      global.hub: "gcr.io/istio-enterprise"
      global.tag: "{{ item.key }}"
      revision: "{{ item.value.revision }}"
  loop: "{{ istio_installs | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  register: istio_operator_install_templates

- name: "Write Operator templates to file"
  copy:
    dest: "{{ work_dir }}/{{ item.item.value.revision }}/operator.yaml"
    content: "{{ item.stdout }}"
  loop: "{{ istio_operator_install_templates.results }}"
  loop_control:
    label: "{{ item.item.key }}"

# - debug:
#     var: istio_operator_install_templates

# - debug:
#     msg: "{{ istio_installs | dict2items }}"

- name: "Create Istio Namespaces"
  kubernetes.core.k8s:
    state: present
    definition:
      api_version: v1
      kind: Namespace
      metadata:
        name: "{{ item.1 }}"
    context: "{{ item.0.value.k8s_context }}"
  loop: "{{ gloo_clusters | dict2items | product(istio_namespaces) | list  }}"
  loop_control:
    label: "Kubernetes Context {{ item.0.key }}"
  when: item.0.value.install_istio

- name: "Install Operator"
  kubernetes.core.k8s:
    state: present
    src: "{{ work_dir }}/{{ item.0.value.revision }}/operator.yaml"
    namespace: istio-operator
    context: "{{ item.1 }}"
  loop: "{{ istio_installs | dict2items | subelements('value.k8s_contexts') }}"
  loop_control:
    label: "Kubernetes Context {{ item.1 }}"
  when: item.0.value.install

- name: "Wait for Istio Operator to be ready"
  include: utils/revisioned_status_check.yml
  loop: "{{ istio_installs | dict2items | subelements('value.k8s_contexts') }}"
  loop_control:
    label: "Kubernetes Context {{ item.1 }}"
  when: item.0.value.install
  vars:
    deployment_name: istio-operator
    deployment_namespace: istio-operator
    istio_revision: "{{ item.0.value.revision }}"
    istio_context: "{{ item.1 }}"

- name: "Create IstioOperator Spec"
  kubernetes.core.k8s:
    state: present
    template:
      path: istio-operator.yaml.j2
      variable_start_string: "[["
      variable_end_string: "]]"
    context: "{{ item.1 }}"
  loop: "{{ istio_installs | dict2items | subelements('value.k8s_contexts') }}"
  loop_control:
    label: "Kubernetes Context {{ item.1 }}"
  when: item.0.value.install


- name: "Wait for istiod to be ready"
  include: utils/revisioned_status_check.yml
  loop: "{{ istio_installs | dict2items | subelements('value.k8s_contexts') }}"
  loop_control:
    label: "Kubernetes Context {{ item.1 }}"
  when: item.0.value.install
  vars:
    deployment_name: istiod
    deployment_namespace: istio-system
    istio_context: "{{ item.1 }}"
    istio_revision: "{{ item.0.value.revision }}"

- name: "Lookup Istio Configmap from istio-system"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ConfigMap
    name: "istio-{{ item.0.value.revision }}"
    namespace: istio-system
    context: "{{ item.1 }}"
  loop: "{{ istio_installs | dict2items | subelements('value.k8s_contexts') }}"
  loop_control:
    label: "Kubernetes Context {{ item.1 }}"
  when: item.0.value.install
  register: istio_cm_result

# - debug:
#     msg:  "{{ istio_cm_result.results[0] }}"

- name: "Set Istio ConfigMap Facts"
  set_fact:
    istio_cm_data: "{{ item.resources[0].data }}"
  loop: "{{ istio_cm_result.results }}"
  loop_control:
    label: "{{ item.item[0].key }}"
  when: item.item[0].value.install and item.resources is defined

# - debug:
#     msg:  "{{ istio_cm_data }}"

- name: "Create Istio ConfigMap"
  kubernetes.core.k8s:
    state: present
    context: "{{ item.1 }}"
    definition:
      api_version: v1
      kind: ConfigMap
      metadata:
        name: "istio-{{ item.0.value.revision }}"
        namespace: istio-gateways
        labels:
          istio.io/rev: "{{ item.0.value.revision }}"
      data: "{{ istio_cm_data | from_yaml }}"
  loop: "{{ istio_installs | dict2items | subelements('value.k8s_contexts') }}"
  loop_control:
    label: "Kubernetes Context {{ item.1 }}"
  when: item.0.value.install

- name: "Create Istio Ingress Gateway"
  kubernetes.core.k8s:
    state: present
    context: "{{ item.1 }}"
    template:
      path: ingressgateway.yaml.j2
      variable_start_string: "[["
      variable_end_string: "]]"
  loop: "{{ istio_installs | dict2items | subelements('value.k8s_contexts') }}"
  loop_control:
    label: "{{ item.1 }}"
  when: item.0.value.install

- name: "Wait for istio ingressgateway to be ready"
  include: utils/revisioned_status_check.yml
  loop: "{{ istio_installs | dict2items | subelements('value.k8s_contexts') }}"
  loop_control:
    label: "{{ item.1 }}"
  when: item.0.value.install
  vars:
    deployment_name: istio-ingressgateway
    deployment_namespace: istio-gateways
    istio_context: "{{ item.1 }}"
    istio_revision: "{{ item.0.value.revision }}"

- name: "Create or Upgrade Istio Ingress Gateway Service"
  kubernetes.core.k8s:
    state: present
    context: "{{ item.1 }}"
    template:
      path: istio-ingressgateway-service.yaml.j2
      variable_start_string: "[["
      variable_end_string: "]]"
  loop: "{{ istio_installs | dict2items | subelements('value.k8s_contexts') }}"
  loop_control:
    label: "{{ item.1 }}"
  when: item.0.value.install